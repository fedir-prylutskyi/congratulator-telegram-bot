import { Context } from 'telegraf';
import { DatabaseService } from './database-service';
import { red, yellow } from 'chalk';

export class CommandService {
  private databaseService: DatabaseService;
  constructor() {
    this.databaseService = new DatabaseService();
  }

  async start(ctx: Context): Promise<void> {
    try {
      const chat = await ctx.getChat();
      const savedData = await this.databaseService.saveChat(chat);
      console.log(`Successfully saved: ${JSON.stringify(savedData)}`);
      await ctx.reply('üíõ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! üíõ');
    } catch (error) {
      console.log(red(error));
      await ctx.reply(
        '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã ‚úÖ\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel ü•∫'
      );
    }
  }

  async cancel(ctx: Context): Promise<void> {
    try {
      const chat = await ctx.getChat();
      const deletedData = await this.databaseService.deleteChat(chat);
      if (deletedData) {
        console.log(`Successfully deleted: ${JSON.stringify(deletedData)}`);
        await ctx.reply('–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ üíî\n\n–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start üòè');
      } else {
        console.log(yellow('Chat already deleted'));
        await ctx.reply('–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞‚ùó\n\n–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start üòè');
      }
    } catch (error) {
      console.log(red(error));
      await ctx.reply('–£–ø—Å...—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–Ω–∏—Ç–µ @f_pril üëä');
    }
  }
}
